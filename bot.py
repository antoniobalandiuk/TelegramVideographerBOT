import asyncio

from aiogram import types
from aiogram.utils import executor
from aiogram.utils.exceptions import MessageNotModified

from loader import dp
from keyboards.keyboard import keyboard, keyboard_for_example


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    await message.reply(f'–¢—É—Ç –≤–∏ –∑–Ω–∞–π–¥–µ—Ç–µ –≤—Å—é –Ω–µ–æ–±—Ö—ñ–¥–Ω—É –≤–∞–º —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é '
                        f'–ø—Ä–æ –ø–æ—Å–ª—É–≥–∏ RA Production. –ê –∫–æ–ª–∏ –≤–∏ –ø–µ—Ä–µ–≥–ª—è–Ω–µ—Ç–µ '
                        f'–≤—Å—ñ –ø—É–Ω–∫—Ç–∏ –º–µ–Ω—é, —â–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–ª—è—Ç—å, —Ç–æ –Ω–∞—Ç–∏—Å–∫–∞–π—Ç–µ '
                        f'–∫–Ω–æ–ø–∫—É "–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ üë•" —Ç–∞ –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –¥–æ –º–µ–Ω–µ '
                        f'–∑–∞ –Ω–∞–π—è—Å–∫—Ä–∞–≤—ñ—à–∏–º–∏ –∫–∞–¥—Ä–∞–º–∏ —É –≤–∞—à–æ–º—É –∂–∏—Ç—Ç—ñ', reply_markup=keyboard)


# async def showreel(call: types.CallbackQuery):
#     await asyncio.sleep(1)
#     await types.ChatActions.upload_video()
#     media = types.MediaGroup
#     media.attach_video(types.InputFile('example/video/wedding.mp4'))
#     await call.message.reply_media_group(media=media)


@dp.callback_query_handler(text_contains='price')
async def price(call: types.CallbackQuery):
    await call.message.edit_text(f'üé¨  –ö–ª—ñ–ø–∏ - –≤—ñ–¥ 200üí≤\n\n'
                                 f'üëó  Fashion - –≤—ñ–¥ 100üí≤\n\n'
                                 f'üì¢  –†–µ–∫–ª–∞–º–Ω—ñ –≤—ñ–¥–µ–æ - –≤—ñ–¥ 100üí≤\n\n'
                                 f'üíç  –í–µ—Å—ñ–ª—å–Ω—ñ —Ñ—ñ–ª—å–º–∏ - —î –∫—ñ–ª—å–∫–∞ –ø–∞–∫–µ—Ç—ñ–≤, –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∑–Ω—ñ–º–∞–ª—å–Ω–∏—Ö –≥–æ–¥–∏–Ω, –∫–∞–º–µ—Ä —Ç–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∞–µ—Ä–æ–∑–π–æ–º–∫–∏\n\n'
                                 f'üíè  Love Story - 100üí≤\n\n'
                                 f'‚úà  –ê–µ—Ä–æ–∑–π–æ–º–∫–∞ - –≤—ñ–¥ 50üí≤\n\n'
                                 f'üë®‚Äçüíª  –ú–æ–Ω—Ç–∞–∂ - –≤—ñ–¥ 30üí≤\n\n', reply_markup=keyboard)


@dp.callback_query_handler(text_contains='contacts')
async def contacts(call: types.CallbackQuery):
    await call.message.edit_text(f'üì±–ú–æ–±.—Ç–µ–ª - +380975547372\n\n'
                                 f'üì∏Instagram - @tolian_ruzhytskyi\n\n'
                                 f'‚úâTelegram - @tolian_ruzhytskyi\n\n', reply_markup=keyboard)


@dp.callback_query_handler(text_contains='special_offers')
async def special_offers(call: types.CallbackQuery):
    await call.message.edit_text(f'–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–π–¥—ñ—Ç—å –ø–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—é - \n'
                                 f'—Ç–∞ –∑–∞–ª–∏—à—ñ—Ç—å –∑–∞—è–≤—É –¥–ª—è –±–∞—Ä—Ç–µ—Ä–Ω–æ–≥–æ –æ–±–º—ñ–Ω—É –ø–æ—Å–ª—É–≥–∞–º–∏\n'
                                 f'https://forms.gle/Jv79qnfyQCXVECMi6\n', reply_markup=keyboard)


@dp.callback_query_handler(text_contains='reviews')
async def reviews(call: types.CallbackQuery):
    await call.message.edit_text('–ü–µ—Ä–µ–π–¥—ñ—Ç—å –ø–æ —Å–∏–ª—Ü—ñ —ñ –∑–∞–ª–∏—à—ñ—Ç—å –∫–æ–º–µ–Ω—Ç–∞—Ä\n'
                                 'https://forms.gle/GXw4s2jXozshadYk8', reply_markup=keyboard)


@dp.message_handler(commands=['example'])
async def message_before_example(message: types.Message):
    await message.reply('–£–≤–∞–≥–∞!!! –í—ñ–¥–µ–æ –≤ –¥–∞–Ω–∏—Ö –ø—Ä–∏–∫–ª–∞–¥–∞—Ö –ø–æ–¥–∞–Ω—ñ —É—Ä–∏–≤–∫–∞–º–∏\n'
                        '–ü–æ–≤–Ω—ñ –≤–µ—Ä—Å—ñ—ó –≤–∏ –∑–º–æ–∂–µ—Ç–µ –≥–ª—è–Ω—É—Ç–∏ –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º\n'
                        'https://m.youtube.com/channel/UCBCrDx6CdQ0BYelhH99IkIg\n'
                        '–ù–ê–ñ–ú–Ü–¢–¨ –ù–ê –ö–ù–û–ü–ö–£ –Ü –ß–ï–ö–ê–ô–¢–ï –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –í–Ü–î–ï–û6', reply_markup=keyboard_for_example)


@dp.callback_query_handler(text_contains='klip')
async def clip(call: types.CallbackQuery):
    await asyncio.sleep(1)
    await types.ChatActions.upload_video()
    media = types.MediaGroup()
    media.attach_video(types.InputFile('example/video/KLIP.mp4'))
    await call.message.reply_media_group(media=media)


@dp.callback_query_handler(text_contains='fashion')
async def fashion(call: types.CallbackQuery):
    await asyncio.sleep(1)
    await types.ChatActions.upload_video()
    media = types.MediaGroup()
    media.attach_video(types.InputFile('example/video/advert_Trim.mp4'))
    await call.message.reply_media_group(media=media)


@dp.callback_query_handler(text_contains='promotional_videos')
async def promotional_videos(call: types.CallbackQuery):
    await asyncio.sleep(1)
    await types.ChatActions.upload_video()
    media = types.MediaGroup()
    media.attach_video(types.InputFile('example/video/Promo_1.mp4'))
    await call.message.reply_media_group(media=media)


@dp.callback_query_handler(text_contains='wedding_videos')
async def wedding_videos(call: types.CallbackQuery):
    await asyncio.sleep(1)
    await types.ChatActions.upload_video()
    media = types.MediaGroup()
    media.attach_video(types.InputFile('example/video/wedding.mp4'))
    await call.message.reply_media_group(media=media)


@dp.callback_query_handler(text_contains='love_story')
async def love_story(call: types.CallbackQuery):
    await asyncio.sleep(1)
    await types.ChatActions.upload_video()
    media = types.MediaGroup()
    media.attach_video(types.InputFile('example/video/love_story.mp4'))
    await call.message.reply_media_group(media=media)


@dp.callback_query_handler(text_contains='aerovideo')
async def aerovideo(call: types.CallbackQuery):
    await asyncio.sleep(1)
    await types.ChatActions.upload_video()
    media = types.MediaGroup()
    media.attach_video(types.InputFile('example/video/story_drone.mp4'))
    await call.message.reply_media_group(media=media)


@dp.errors_handler(exception=MessageNotModified)
async def message_not_modified_handler(update, error):
    return True


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)


